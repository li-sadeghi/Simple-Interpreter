var students: list[list[string]] = [
    ["99111111", "person0", "test0", "18.98", "403111111"],
    ["400111111", "person1", "test1", "18.12", "401111111"],
    ["400222222", "person2", "test2", "19", "402222222"],
    ["401111111", "person3", "test3", "16.55", "402111111"],
    ["40211111", "person4", "test4", "19.72", "null"],
    ["40222222", "person5", "test5", "17.29", "null"],
    ["40311111", "person6", "test6", "14.84", "null"]
];

var year: string = "400";


func charToInt(c: string) : int {
    if (c == "0") {
        return 0;
    } else {
        if (c == "1") {
            return 1;
        } else {
            if (c == "2") {
                return 2;
            } else {
                if (c == "3") {
                    return 3;
                } else {
                    if (c == "4") {
                        return 4;
                    } else {
                        if (c == "5") {
                            return 5;
                        } else {
                            if (c == "6") {
                                return 6;
                            } else {
                                if (c == "7") {
                                    return 7;
                                } else {
                                    if (c == "8") {
                                        return 8;
                                    } else {
                                        return 9;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

func parseGpa(g: string) : int {
    var result: int = 0;
    var i: int = 0;
    var n: int = len(g);
    while (i < n) {
        var c: string = g[i];
        if (c == ".") {
        } else {
            var digit: int = charToInt(c);
            result = result * 10 + digit;
        }
        i = i + 1;
    }
    return result;
}

func prefixMatches(s: string, prefix: string) : bool {
    var pLen: int = len(prefix);
    var sLen: int = len(s);
    var isMatched = true;
    if (pLen <= sLen) {
        var i: int = 0;
        while (i < pLen) {
            var cs: string = s[i];
            var cp: string = prefix[i];
            if (cs == cp) {
            } else {
                isMatched = false;
            }
            i = i + 1;
        }
    } else {
        isMatched = false;
    }
    return isMatched;
}

func findSumAndCount(students: list[list[string]], mentorId: string) : list[int] {
    var sum: int = 0;
    var count: int = 0;
    var i: int = 0;
    var n: int = len(students);
    while (i < n) {
        var student: list[string] = students[i];
        var mId: string = student[4];
        if (mId == mentorId) {
            var gpaStr: string = student[3];
            var gpaVal: int = parseGpa(gpaStr);
            sum = sum + gpaVal;
            count = count + 1;
            var sub: list[int] = findSumAndCount(students, student[0]);
            var subSum: int = sub[0];
            var subCount: int = sub[1];
            sum = sum + subSum;
            count = count + subCount;
        }
        i = i + 1;
    }
    return [sum, count];
}

func findBestMentor(students: list[list[string]], year: string) : list[string] {
    var bestId: string = "";
    var bestAvg: int = -1;
    var i: int = 0;
    var n: int = len(students);
    while (i < n) {
        var s: list[string] = students[i];
        var sid: string = s[0];
        if (prefixMatches(sid, year)) {
            var res: list[int] = findSumAndCount(students, sid);
            var total: int = res[0];
            var c: int = res[1];
            var avg: int = 0;
            if (c > 0) {
                avg = total / c;
            } else {
                avg = 0;
            }
            if (avg > bestAvg) {
                bestAvg = avg;
                bestId = sid;
            }
        }
        i = i + 1;
    }
    if (bestId == "") {
        return ["", ""];
    }
    var fname: string = "";
    var lname: string = "";
    var j: int = 0;
    while (j < n) {
        var stud: list[string] = students[j];
        var id: string = stud[0];
        if (id == bestId) {
            fname = stud[1];
            lname = stud[2];
        }
        j = j + 1;
    }
    return [fname, lname];
}

var resultName: list[string] = findBestMentor(students, year);
print(resultName);
